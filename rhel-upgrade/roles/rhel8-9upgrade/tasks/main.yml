---
#- name: Set variables for the role
#  set_fact:
#    ansible_python_interpreter: /usr/bin/python3
#    python_package: python3
- name: Set variables for the role
  set_fact:
    ansible_python_interpreter: /usr/bin/python3

#- name: Install Python 3 using raw module
#  raw: yum install -y python3
#  register: install_python3_result

#- name: Set unversioned-python to Python 2
#  command: update-alternatives --install /usr/bin/unversioned-python unversioned-python /usr/bin/python2 10

#- name: Symlink /usr/bin/python to unversioned-python
#  file:
#    src: /usr/bin/unversioned-python
#    dest: /usr/bin/python
#    state: link

#- name: Verify Python version
#  command: python --version
#  register: python_version_output


#- name: Display python version
#  debug:
#    msg: "Python version is: {{ python_version_output.stdout }}"

#- name: Set Python 3 as the interpreter for subsequent tasks
#  set_fact:
#    ansible_python_interpreter: /usr/bin/python3
#  when: install_python3_result is succeeded

#- name: Force remove python2-leapp if present
#  command: rpm -e --nodeps python2-leapp
#  ignore_errors: yes


#- name: Uninstall leapp* if present
#  yum:
#    name: leapp*
#    state: absent
#  ignore_errors: yes

#- name: Uninstall python if present
#  yum:
#    name: python3
#    state: absent
#  ignore_errors: yes


#- name: Uninstall leapp-upgrade-el7toel8 if present
#  yum:
#    name: leapp-upgrade-el7toel8
#    state: absent
#  ignore_errors: yes

#- name: Force remove leapp-upgrade-el7toel8 if present
#  command: rpm -e --nodeps leapp-upgrade-el7toel8
#  ignore_errors: yes



#- name: Uninstall python2-leapp if present
#  yum:
#    name: python2-leapp
#    state: absent
#  ignore_errors: yes

#- name: Uninstall leapp-repository if present
#  yum:
#    name: leapp-repository
#    state: absent
#  ignore_errors: yes

#- name: Remove all files in /var/lib/leapp/
#  file:
#    path: /var/lib/leapp/
#    state: absent
#  register: remove_leapp_files


#- name: Set variables for the role
#  set_fact:
#    ansible_python_interpreter: /usr/bin/python3
#    python_package: python3
#- name: Install Python 3 using raw module
#  raw: yum install -y python3

- name: Reboot into the latest kernel
  shell: |
    reboot
  async: 1
  poll: 0

- name: Wait for server to restart
  local_action:
    module: wait_for
      host={{ inventory_hostname }}
      port=22
      delay=60
  become: false


- name: Enable required RHEL 8 repositories using subscription-manager
  shell: |
    sleep 60
    subscription-manager repos --enable=rhel-8-for-x86_64-baseos-rpms
    subscription-manager repos --enable=rhel-8-for-x86_64-appstream-rpms

#- name: Update all packages to the latest RHEL 8 versions
#  yum:
#    name: "*"
#    state: latest

- name: Update all packages to the latest RHEL 8 versions
  shell: |
    yum update -y


- name: Disable excludes in yum configuration temporarily
  lineinfile:
    path: /etc/yum.conf
    regexp: '^exclude='
    state: absent

- name: Clean YUM cache
  command: yum clean all

- name: Update YUM cache
  command: yum makecache

- name: Install leapp and required packages
  yum:
    name: "{{ item }}"
    state: latest
    disable_excludes: all
  with_items:
    - leapp
    - leapp-repository
  #  - leapp-0.17.0

#- name: Check if leapp is installed
#  command: leapp --version
#  register: leapp_installed
#  ignore_errors: yes

#- name: Install or update leapp to version 0.17.0 if not installed
#  yum:
#    name: leapp-0.17.0
#    state: present
#  when: leapp_installed.failed

#- name: Check Python version
#  command: python --version
#  register: python_version

#- name: Ensure Python 2.7 is being used
#  debug:
#    msg: "Python version is {{ python_version.stdout }}"
#  when: "'Python 2.7' not in python_version.stdout"

#- name: Install the required version of leapp using pip if yum installation fails
#  pip:
#    name: leapp==0.17.0
#    state: present
#    executable: pip
#  when: leapp_installed.failed and "'Python 2.7' in python_version.stdout"


#- name: Install Leapp utility for RHEL 8 to 9 upgrade
#  yum:
#    name: leapp
#    state: present

#- name: Enable RHEL 8 repositories for Leapp
#  shell: |
#    subscription-manager repos --enable=rhel-8-for-x86_64-baseos-rpms
#    subscription-manager repos --enable=rhel-8-for-x86_64-appstream-rpms

- name: Reboot into the latest kernel
  shell: |
    grub2-set-default 0
    reboot
  async: 1
  poll: 0

- name: Wait for server to restart
  local_action:
    module: wait_for
      host={{ inventory_hostname }}
      port=22
      delay=60
  become: false

- name: Check current kernel version
  shell: uname -r
  register: current_kernel

#- name: Ensure latest kernel is in use
#  assert:
#    that:
#      - current_kernel.stdout == ansible_kernel

- name: Check for unsigned packages
  shell: rpm -qai | grep "not signed"
  register: unsigned_packages_result
  ignore_errors: yes
  failed_when: false

- name: Gather list of unsigned packages
  set_fact:
    unsigned_packages: "{{ unsigned_packages_result.stdout_lines | map('regex_search', '^Name\\s+\\: (.+)$') | select('string') | list }}"

- name: Notify about unsigned packages
  debug:
    msg: "Unsigned packages found: {{ unsigned_packages }}"
  when: unsigned_packages | length > 0

#- name: Remove unsupported kernel drivers
#  become: yes
#  become_method: sudo
#  command: rmmod {{ item }}
#  loop:
#    - floppy
#    - pata_acpi
#  ignore_errors: yes
#  register: rmmod_result

#- name: Debug removal results
#  debug:
#    msg: "Result of removing kernel module {{ item.item }}: {{ item.rc }}"
#  loop: "{{ rmmod_result.results }}"
#  when: rmmod_result is defined

#- name: Remove pam_pkcs11 module
#  ansible.builtin.shell: |
#    set -o pipefail
#    leapp answer --section remove_pam_pkcs11_module_check.confirm=True
#  args:
#    executable: /bin/bash
#  ignore_errors: yes

#- name: Copy /var/log/leapp/answerfile
#  copy:
#    src: files/answerfile
#    dest: /var/log/leapp/answerfile
#- name: Ensure Firewalld AllowZoneDrifting is disabled
#  lineinfile:
#    path: /etc/firewalld/firewalld.conf
#    regexp: '^AllowZoneDrifting='
#    line: 'AllowZoneDrifting=no'

- name: Disable and stop Firewalld
  service:
    name: firewalld
    state: stopped
    enabled: no

#- name: Update the Leapp answer file to address missing answers
#  lineinfile:
#    path: /var/log/leapp/answerfile
#    regexp: '^process = False'
#    line: 'process = True'
#  when: "ansible_facts['distribution'] == 'RedHat'"

#- name: Add [remove_pam_pkcs11_module_check] confirmation to the Leapp answer file
#  blockinfile:
#    path: /var/log/leapp/answerfile
#    block: |
#      [remove_pam_pkcs11_module_check]
#      confirm = True

- name: Disable root login via SSH password
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin'
    line: 'PermitRootLogin prohibit-password'

- name: Reload SSH service to apply changes
  service:
    name: sshd
    state: reloaded

#- name: Check if VDO is in use
#  command: "lsblk --output NAME,FSTYPE | grep vdo"
#  register: vdo_check
#  ignore_errors: yes
- name: Install the 'vdo' package
  yum:
    name: vdo
    state: present

#- name: Skip VDO check in Leapp if VDO is not in use
#  lineinfile:
#    path: /var/log/leapp/answerfile
#    regexp: '^.*check_vdo'
#    line: 'process = True'
#  when: vdo_check.rc != 0

#- name: Display the content of /var/log/leapp/answerfile
#  command: cat /var/log/leapp/answerfile
#  register: file_content

#- name: Print the file content
#  debug:
#    var: file_content.stdout

#- name: Set ulimit -n to 16384 for all users
#  lineinfile:
#    path: /etc/security/limits.conf
#    line: '* - nofile 16384'
#    create: yes

- name: Delete contents of /var/lib/leapp
  file:
    path: /var/lib/leapp
    state: absent
  ignore_errors: yes

- name: Recreate the /var/lib/leapp directory
  file:
    path: /var/lib/leapp
    state: directory
    mode: '0755'


- name: Run pre-upgrade checks
  shell: |
    ulimit -n 16384 
    leapp preupgrade
  register: leapp_preupgrade
  ignore_errors: yes

- name: Check pre-upgrade results
  shell: leapp preupgrade --whitelist '*' --no-rpms
  register: preupgrade_results
  failed_when: "'Risk Factor: high' in preupgrade_results.stdout"
  ignore_errors: yes

- name: Halt playbook if pre-upgrade checks failed
  fail:
    msg: "Pre-upgrade checks failed, please review and resolve issues before continuing."
  when: leapp_preupgrade.rc != 0

- name: Perform the upgrade
  shell: |
    ulimit -n 16384 
    leapp upgrade
  register: leapp_upgrade
  ignore_errors: yes

- name: Reboot system to complete the upgrade
  reboot:
    reboot_timeout: 600
  when: leapp_upgrade.rc == 0

- name: Wait for server to restart
  local_action:
    module: wait_for
    host: "{{ inventory_hostname }}"
    port: 22
    delay: 60
  become: false


- name: Verify RHEL 9 upgrade
  shell: cat /etc/redhat-release
  register: os_release
  until: os_release is succeeded
  retries: 20
  delay: 30
  
- name: Ensure system is now running RHEL 9
  assert:
    that:
      - "'Red Hat Enterprise Linux release 9' in os_release.stdout"
    fail_msg: "The upgrade to RHEL 9 failed."